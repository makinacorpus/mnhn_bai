        <div id="3dhop" class="tdhop" onmousedown="if (event.preventDefault) event.preventDefault()">
<!--             <div id="tdhlg"></div> -->
            <div id="toolbar">
                <img id="home"     title="Home"                  src="/js/dependencies/3DHOP_2.0/skins/dark/home.png" /><br/>
                <img id="zoomin"   title="Zoom In"               src="/js/dependencies/3DHOP_2.0/skins/dark/zoomin.png" /><br/>
                <img id="zoomout"  title="Zoom Out"              src="/js/dependencies/3DHOP_2.0/skins/dark/zoomout.png"/><br/>
                <img id="light_on" title="Disable Light Control" src="/js/dependencies/3DHOP_2.0/skins/dark/light_on.png" style="position:absolute; visibility:hidden;"/>
                <img id="light"    title="Enable Light Control"  src="/js/dependencies/3DHOP_2.0/skins/dark/light.png"/><br/>
                <img id="hotspot_on" title="Hide Hotspots"       src="/js/dependencies/3DHOP_2.0/skins/dark/pin_on.png" style="position:absolute; visibility:hidden;"/>
                <img id="hotspot"    title="Show Hotspots"       src="/js/dependencies/3DHOP_2.0/skins/dark/pin.png" /><br/>
                <img id="full_on"  title="Exit Full Screen"      src="/js/dependencies/3DHOP_2.0/skins/dark/full_on.png" style="position:absolute; visibility:hidden;"/>
                <img id="full"     title="Full Screen"           src="/js/dependencies/3DHOP_2.0/skins/dark/full.png" /><br/>
                <img id="opacity"     title="Opacity"            src="/js/dependencies/3DHOP_2.0/skins/dark/opacity.png" /><br/>
                <div id="colorpicker_container">
                    <select name="colorpicker">
                        <option value="#ffffff">White</option>
                        <option value="#7bd148">Green</option>
                        <option value="#5484ed">Bold blue</option>
                        <option value="#a4bdfc">Blue</option>
                        <option value="#46d6db">Turquoise</option>
                        <option value="#7ae7bf">Light green</option>
                        <option value="#51b749">Bold green</option>
                        <option value="#fbd75b">Yellow</option>
                        <option value="#ffb878">Orange</option>
                        <option value="#ff887c">Red</option>
                        <option value="#dc2127">Bold red</option>
                        <option value="#dbadff">Purple</option>
                        <option value="#e1e1e1">Gray</option>
                    </select>
                </div>
                
            </div>
            <div id="opacity_slider" class="opacity_slider"></div>
            <div class="copyright"><%= __('Copyright') %> : <%= obj.getCopyright() %></div>
            
            
            <canvas id="draw-canvas" class="tdhop_canvas"></canvas>    
            
            <div id="dialog_annotations" title="<%= __('Annotations') %>" class="dialog_annotations"><div class="annotation_content"></div><span class="dialog_close"><%= __('Close') %></span></div>
        </div>

        
        
<script type="text/javascript">
var presenter = null;

function setup3dhop() { 
    presenter = new Presenter("draw-canvas");
    presenter.is_full_screen = false;
    res = presenter.supportsWebGL();
    distance_view = 200.0;
    scale = 5.0;
    if(res) {
        modelInstances = {};
        modelInstances["ModelObj3D"] =
                { 
                     mesh : "Obj3D",
                     color : [0.4, 0.4, 0.4, 0.5],
                     tags: ["Obj3D"]
                };
                
        // Grid
        /*
        grid_size = 400;
        grid_step = 100;
        
        for(x = - grid_size / 2; x < grid_size / 2; x = x + grid_step) {
            color_r = 1;
            for(y = - grid_size / 2; y < grid_size / 2; y = y + grid_step) {
                color_r = 1;
                for(z = - grid_size / 2; z < grid_size / 2; z = z + grid_step) {
                    id = "GRID"+x+y+z;
                    modelInstances[id] = {
                            mesh: "Square",
                            transform : { 
                                matrix: SglMat4.mul(SglMat4.translation([x, y, z]), SglMat4.scaling([ 1, 1, 1]))
                            },
                            color : [0, color_r, 0, 1]
                    };
                    color_r = 0;
                }
            }
        }
        */
        
        presenter.setScene({
            meshes: {
                "Obj3D" : { url: "<%= obj.getFileName3D() %>", onready: sceneLoaded},
                "Sphere" : { url: "/img/sphere.ply" },                 
                "Square" : { url: "/img/square.ply" },
            },
            modelInstances : modelInstances,
            
            <% if(annotations.length > 0) { %>
            spots : {
                 <% annotations.forEach(function(annotation, index) {%>
                     "POI<%= index %>" : {
                         mesh: "Sphere",
                         transform : { 
                             matrix: SglMat4.mul(SglMat4.translation([<%= annotation.getX() %>, <%= annotation.getY() %>, <%= annotation.getZ() %>]), SglMat4.scaling([ scale, scale, scale]))
                         },
                         color : [1, 0.4, 0.4, 1]
                     },
                 <% }); %>
            },
            <% } %>
            
            trackball: { 
                type: SphereTrackball
            },
            space: {
                centerMode: "explicit",
                radiusMode: "explicit",
                explicitCenter: [0.0, 0.0, 0.0],
                explicitRadius: distance_view
            }
        });
        
        $(".opacity_slider").slider({slide: changeOpacity, min:0, max:100, value:50});
        presenter._onPickedSpot = onPickedSpot;
        
    }
    else
        alert("<%= __('Unable to initialize WebGL. Your browser may not support it.') %>");          
}

function onPickedSpot(id) {
    switch(id) {
        <% if(annotations.length > 0) { %>
            <% annotations.forEach(function(annotation, index) {%>
                case 'POI<%= index %>' : 
                    $('.annotation_content').html('<h4><%= annotation.getTitle() %></h4><p><%= annotation.getDescription() %></p>');
                    //$('#dialog_annotations').dialog('open');
                    $('#dialog_annotations').show();
                    break;
            <% }); %>
        <% } %>
    }
}

function changeOpacity( event, ui) {
    alpha = ui.value / 100;
    presenter._scene.modelInstances.ModelObj3D.color[3] = alpha;
    presenter.setInstanceVisibility(HOP_ALL, true, true);
}

function actionsToolbar(action) {
    if(action=='home') presenter.resetTrackball(); 
    else if(action=='zoomin') presenter.zoomOut();
    else if(action=='zoomout') presenter.zoomIn(); 
    else if(action=='light' || action=='light_on') { presenter.enableLightTrackball(!presenter.isLightTrackballEnabled()); lightSwitch(); }
    else if(action=='hotspot'|| action=='hotspot_on') {
            presenter.toggleSpotVisibility(HOP_ALL, true); 
            presenter.enableOnHover(!presenter.isOnHoverEnabled());
            hotspotSwitch(); 
    }    
    else if(action=='full'  || action=='full_on') fullscreenSwitch()
    else if(action=='opacity') presenter.enableOpacity(); 
}

function sceneLoaded() {
    <% if(obj.getDimX() && obj.getDimY() && obj.getDimZ()) { %>
        <% if(obj.getDimX() > 0 && obj.getDimY() > 0 && obj.getDimZ() > 0) { %>
            // Dimensions have been filled
            adjustZoom(<%= obj.getDimX() %>, <%= obj.getDimY() %>, <%= obj.getDimZ() %>);
        <% } %>
    <% } else { %>
        // try to get dimensions from the mesh
        if(!presenter._scene.meshes.Obj3D.isNexus && presenter._scene.meshes.Obj3D.renderable) {
            max = presenter._scene.meshes.Obj3D.renderable.boundingBox.max;
            min = presenter._scene.meshes.Obj3D.renderable.boundingBox.min;
            delta_x = max[0] - min[0];
            delta_y = max[1] - min[1];
            delta_z = max[2] - min[2];
            adjustZoom(delta_x, delta_y, delta_z);
        } else {
            // nexus
            // we can do nothing
        }    
    <% } %>
}


function adjustZoom(delta_x, delta_y, delta_z) {
    delta = [delta_x, delta_y, delta_z];
    var delta_min = Math.min.apply(Math, delta);
    
    if(delta_min < distance_view) {
        nb_zoom = distance_view / delta_min;
        for(i = 0 ; i <= nb_zoom; i++)
            presenter.zoomOut();
    }
    else {
        nb_zoom = distance_view / delta_min;
        for(i = 0 ; i <= nb_zoom; i++)
            presenter.zoomIn();
    }
}

$(document).ready(function(){

     init3dhop();
     setup3dhop();
     resizeCanvas($(".bloc_3d").width(), $(".bloc_3d").height() - 40);
     moveToolbar(5,5);
    
    $(window).resize(function() {
        //if($(window).width() < 500) {
        if(!presenter.is_full_screen) {
            //resizeCanvas($(window).width() - 50, 400);
            resizeCanvas($(".bloc_3d").width(), $(".bloc_3d").height() - 40);
            presenter.setInstanceVisibility(HOP_ALL, true, true);
        }   
    });    
    
    // Popup for displaying users annotations
    $('#dialog_annotations').hide();
//     $('#dialog_annotations').dialog({ dialogClass: 'noTitle' });
//     $('#dialog_annotations').dialog('close');
    $('.dialog_close').on('click', function(){ $('#dialog_annotations').hide(); });
    
    
    // hide all div containers  
   // $('#dialog_annotations').hide();  
    // append click event to the a element  
    /*$('#dialog_annotations').click(function(e) {  
        // slide down the corresponding div if hidden, or slide up if shown  
        $(this).parent().next('#dialog_annotations').slideToggle('slow');  
        // set the current item as active  
        $(this).parent().toggleClass('active');  
        e.preventDefault();  
    });    
    */

    $('select[name="colorpicker"]').simplecolorpicker({
        picker: true
    }).on('change', function() {
        $("#draw-canvas").css('background-color', $('select[name="colorpicker"]').val());
    });    
    
});
</script>